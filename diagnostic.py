import requests
import json
from datetime import datetime

class MoySkladDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ API"""
    
    def __init__(self, token):
        self.base_url = "https://api.moysklad.ru/api/remap/1.2"
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Accept-Encoding": "gzip",
            "Content-Type": "application/json"
        }
    
    def print_json(self, data, title=""):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç JSON"""
        print("\n" + "=" * 80)
        if title:
            print(f"üìã {title}")
            print("=" * 80)
        print(json.dumps(data, indent=2, ensure_ascii=False))
        print("=" * 80)
    
    def get_order_by_name(self, order_name):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É"""
        url = f"{self.base_url}/entity/customerorder"
        params = {
            "filter": f"name={order_name}",
            "limit": 1
        }
        
        try:
            response = requests.get(url, headers=self.headers, params=params)
            response.raise_for_status()
            data = response.json()
            
            if data.get('rows'):
                return data['rows'][0]
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    def get_order_positions(self, order_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        url = f"{self.base_url}/entity/customerorder/{order_id}/positions"
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            data = response.json()
            return data.get('rows', [])
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞: {e}")
            return []
    
    def get_product_by_article(self, article):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        url = f"{self.base_url}/entity/product"
        params = {
            "filter": f"article={article}"
        }
        
        try:
            response = requests.get(url, headers=self.headers, params=params)
            response.raise_for_status()
            data = response.json()
            
            if data.get('rows'):
                return data['rows'][0]
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            return None
    
    def get_product_full_info(self, product_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
        url = f"{self.base_url}/entity/product/{product_id}"
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {e}")
            return None
    
    def get_stock_all(self, product_id):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —á–µ—Ä–µ–∑ /report/stock/all"""
        url = f"{self.base_url}/report/stock/all"
        params = {
            "filter": f"product=https://api.moysklad.ru/api/remap/1.2/entity/product/{product_id}"
        }
        
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ (stock/all): {e}")
            return None
    
    def get_stock_bystore(self, product_id, moment=None):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —á–µ—Ä–µ–∑ /report/stock/bystore"""
        url = f"{self.base_url}/report/stock/bystore"
        params = {
            "filter": f"product=https://api.moysklad.ru/api/remap/1.2/entity/product/{product_id}"
        }
        
        if moment:
            params["moment"] = moment
        
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ (stock/bystore): {e}")
            return None
    
    def get_last_supply(self, product_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–∏—ë–º–∫—É —Ç–æ–≤–∞—Ä–∞"""
        url = f"{self.base_url}/entity/supply"
        params = {
            "filter": f"positions.assortment=https://api.moysklad.ru/api/remap/1.2/entity/product/{product_id}",
            "order": "moment,desc",
            "limit": 1,
            "expand": "positions"
        }
        
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if data.get('rows'):
                return data['rows'][0]
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏—ë–º–æ–∫: {e}")
            return None
    
    def diagnose_product(self, order_name, article=None):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
        
        print("\n\n")
        print("üîç" + "=" * 78 + "üîç")
        print(f"   –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–∫–∞–∑ {order_name}" + (f", –ê—Ä—Ç–∏–∫—É–ª {article}" if article else ""))
        print("üîç" + "=" * 78 + "üîç")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        print("\nüì¶ –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
        order = self.get_order_by_name(order_name)
        
        if not order:
            print(f"‚ùå –ó–∞–∫–∞–∑ {order_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        order_id = order.get('id')
        print(f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: {order.get('name')}")
        print(f"   ID: {order_id}")
        print(f"   –î–∞—Ç–∞: {order.get('moment')}")
        print(f"   –°—É–º–º–∞: {order.get('sum', 0) / 100} —Ä—É–±.")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        print(f"\nüì¶ –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞...")
        positions = self.get_order_positions(order_id)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        
        if not positions:
            print(f"‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        print(f"\nüìã –®–ê–ì 3: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ:")
        
        for idx, pos in enumerate(positions, 1):
            assortment_meta = pos.get('assortment', {}).get('meta', {})
            assortment_href = assortment_meta.get('href', '')
            
            print(f"\n   {idx}. –ü–æ–∑–∏—Ü–∏—è:")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos.get('quantity')}")
            print(f"      –¶–µ–Ω–∞: {pos.get('price', 0) / 100} —Ä—É–±.")
            print(f"      –°—É–º–º–∞: {(pos.get('price', 0) * pos.get('quantity', 0)) / 100} —Ä—É–±.")
            print(f"      –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {assortment_href}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            if assortment_href:
                product_id = assortment_href.split('/')[-1]
                product_type = assortment_meta.get('type', 'unknown')
                
                print(f"      –¢–∏–ø: {product_type}")
                print(f"      ID: {product_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                if product_type == 'product':
                    self.diagnose_product_details(product_id, pos.get('quantity'), pos.get('price', 0), order.get('moment'))
                elif product_type == 'variant':
                    self.diagnose_variant_details(product_id, pos.get('quantity'), pos.get('price', 0), order.get('moment'))
    
    def diagnose_variant_details(self, variant_id, quantity, price, moment):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        url = f"{self.base_url}/entity/variant/{variant_id}"
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            variant = response.json()
            
            print(f"\n      üì¶ –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–í–ê–†–ê:")
            print(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {variant.get('name')}")
            print(f"         –ê—Ä—Ç–∏–∫—É–ª: {variant.get('article', '–Ω–µ—Ç')}")
            print(f"         –ö–æ–¥: {variant.get('code', '–Ω–µ—Ç')}")
            
            # –ë–∞–∑–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            product_meta = variant.get('product', {}).get('meta', {})
            if product_meta:
                product_id = product_meta.get('href', '').split('/')[-1]
                print(f"         –ë–∞–∑–æ–≤—ã–π —Ç–æ–≤–∞—Ä ID: {product_id}")
            
            # –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
            buy_price = variant.get('buyPrice', {})
            if buy_price:
                print(f"         üí∞ –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: {buy_price.get('value', 0) / 100} —Ä—É–±.")
            else:
                print(f"         ‚ö†Ô∏è  –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: –ù–ï –£–ö–ê–ó–ê–ù–ê")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.check_stock_for_item(variant_id, 'variant', moment)
            
        except Exception as e:
            print(f"         ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def diagnose_product_details(self, product_id, quantity, price, moment):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        product_full = self.get_product_full_info(product_id)
        
        if not product_full:
            return
        
        print(f"\n      üì¶ –¢–û–í–ê–†:")
        print(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {product_full.get('name')}")
        print(f"         –ê—Ä—Ç–∏–∫—É–ª: {product_full.get('article', '–Ω–µ—Ç')}")
        print(f"         –ö–æ–¥: {product_full.get('code', '–Ω–µ—Ç')}")
        
        # –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
        buy_price = product_full.get('buyPrice', {})
        if buy_price:
            print(f"         üí∞ –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: {buy_price.get('value', 0) / 100} —Ä—É–±.")
        else:
            print(f"         ‚ö†Ô∏è  –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: –ù–ï –£–ö–ê–ó–ê–ù–ê")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        self.check_stock_for_item(product_id, 'product', moment)
    
    def check_stock_for_item(self, item_id, item_type, moment):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
        url = f"{self.base_url}/report/stock/bystore"
        
        filter_param = f"{item_type}=https://api.moysklad.ru/api/remap/1.2/entity/{item_type}/{item_id}"
        
        params = {
            "filter": filter_param
        }
        
        if moment:
            params["moment"] = moment
        
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            response.raise_for_status()
            stock_data = response.json()
            
            if stock_data and stock_data.get('rows'):
                print(f"\n         üè™ –û–°–¢–ê–¢–ö–ò –ü–û –°–ö–õ–ê–î–ê–ú:")
                
                total_stock = 0
                total_cost_weighted = 0
                total_qty_for_cost = 0
                has_cost = False
                
                for row in stock_data['rows']:
                    stock_by_store_list = row.get('stockByStore', [])
                    
                    for store in stock_by_store_list:
                        store_name = store.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')
                        stock = store.get('stock', 0)
                        reserve = store.get('reserve', 0)
                        cost = store.get('cost', 0)
                        
                        print(f"\n            üìç {store_name}:")
                        print(f"               –û—Å—Ç–∞—Ç–æ–∫: {stock}")
                        print(f"               –†–µ–∑–µ—Ä–≤: {reserve}")
                        
                        if cost > 0:
                            print(f"               üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost / 100} —Ä—É–±.")
                            total_cost_weighted += cost * stock
                            total_qty_for_cost += stock
                            has_cost = True
                        else:
                            print(f"               ‚ö†Ô∏è  –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: –ù–ï–¢ –î–ê–ù–ù–´–•")
                        
                        total_stock += stock
                
                print(f"\n         üìä –ò–¢–û–ì–û:")
                print(f"            –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {total_stock}")
                
                if has_cost and total_qty_for_cost > 0:
                    avg_cost = total_cost_weighted / total_qty_for_cost / 100
                    print(f"            ‚úÖ –°—Ä–µ–¥–Ω—è—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {avg_cost:.2f} —Ä—É–±.")
                else:
                    print(f"            ‚ùå –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: –ù–ï –î–û–°–¢–£–ü–ù–ê")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–∏—ë–º–∫—É
                    self.check_last_supply(item_id, item_type)
            else:
                print(f"\n         ‚ö†Ô∏è  –û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"\n         ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
    
    def check_last_supply(self, item_id, item_type):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∏—ë–º–∫–∏"""
        url = f"{self.base_url}/entity/supply"
        
        filter_param = f"positions.assortment=https://api.moysklad.ru/api/remap/1.2/entity/{item_type}/{item_id}"
        
        params = {
            "filter": filter_param,
            "order": "moment,desc",
            "limit": 1,
            "expand": "positions"
        }
        
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if data.get('rows'):
                supply = data['rows'][0]
                print(f"\n            üì¶ –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–†–ò–Å–ú–ö–ê:")
                print(f"               –ù–æ–º–µ—Ä: {supply.get('name')}")
                print(f"               –î–∞—Ç–∞: {supply.get('moment')}")
                
                # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é
                positions = supply.get('positions', {}).get('rows', [])
                for pos in positions:
                    pos_assortment_href = pos.get('assortment', {}).get('meta', {}).get('href', '')
                    if item_id in pos_assortment_href:
                        print(f"               –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos.get('quantity')}")
                        print(f"               –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: {pos.get('price', 0) / 100} —Ä—É–±.")
                        break
            else:
                print(f"\n            ‚ùå –ü–†–ò–Å–ú–ö–ò –ù–ï –ù–ê–ô–î–ï–ù–´")
                print(f"               –¢–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥!")
                
        except Exception as e:
            print(f"\n            ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏—ë–º–æ–∫: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    MOYSKLAD_TOKEN = "105d4f38eb9a02400c3a6428ea71640babe37e98"
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    diagnostic = MoySkladDiagnostic(MOYSKLAD_TOKEN)
    
    print("\n")
    print("üîß" * 40)
    print("   –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢ –ú–û–ô–°–ö–õ–ê–î")
    print("üîß" * 40)
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {"order": "661002421", "article": None},
        {"order": "WB3998670716", "article": None}
    ]
    
    for test_case in test_cases:
        diagnostic.diagnose_product(test_case["order"], test_case.get("article"))
    
    print("\n\n")
    print("=" * 80)
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)
    print("\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥,")
    print("—á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å —Å —Ç–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç API")


if __name__ == "__main__":
    main()