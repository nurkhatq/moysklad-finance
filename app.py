import streamlit as st
import requests
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
import os
from collections import defaultdict
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (Streamlit –µ–≥–æ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
if not logger.handlers:
    logger.addHandler(handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–æ–π–°–∫–ª–∞–¥ - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –û—Ç—á—ë—Ç",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .stButton>button {
        width: 100%;
        background-color: #1f77b4;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        padding: 0.5rem 1rem;
    }
</style>
""", unsafe_allow_html=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
CONFIG_FILE = "config.json"
FIELDS_CONFIG_FILE = "fields_config.json"
SYNC_STATE_FILE = "sync_state.json"

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
DEFAULT_FIELDS = {
    "orders": [
        "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–°—Ç–∞—Ç—É—Å",
        "–ü—Ä–∏–º–µ–Ω—ë–Ω", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞", "–û–ø–ª–∞—á–µ–Ω–æ", "–û—Ç–≥—Ä—É–∂–µ–Ω–æ", "–ù–î–°"
    ],
    "positions": [
        "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        "–¶–µ–Ω–∞", "–°—É–º–º–∞", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –µ–¥.", "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å",
        "–ü—Ä–∏–±—ã–ª—å", "–ú–∞—Ä–∂–∞ %"
    ],
    "summary": [
        "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–í—ã—Ä—É—á–∫–∞", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤", "–î–æ—Å—Ç–∞–≤–∫–∞",
        "–ö–æ–º–∏—Å—Å–∏—è –ú–ü", "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ù–î–°", "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å",
        "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å %"
    ]
}

class ConfigManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    @staticmethod
    def load_config():
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {
            "moysklad_token": "",
            "google_credentials_file": "credentials.json",
            "spreadsheet_name": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç",
            "sync_schedule": "daily",
            "sync_time": "09:00",
            "days_back": 30
        }
    
    @staticmethod
    def save_config(config):
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
    
    @staticmethod
    def load_fields_config():
        if os.path.exists(FIELDS_CONFIG_FILE):
            with open(FIELDS_CONFIG_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return DEFAULT_FIELDS
    
    @staticmethod
    def save_fields_config(fields):
        with open(FIELDS_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(fields, f, indent=4, ensure_ascii=False)
    
    @staticmethod
    def load_sync_state():
        if os.path.exists(SYNC_STATE_FILE):
            with open(SYNC_STATE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {
            "last_sync": None,
            "synced_orders": []
        }
    
    @staticmethod
    def save_sync_state(state):
        with open(SYNC_STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state, f, indent=4, ensure_ascii=False)


class MoySkladAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ú–æ–π–°–∫–ª–∞–¥"""
    
    def __init__(self, token):
        self.base_url = "https://api.moysklad.ru/api/remap/1.2"
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Accept-Encoding": "gzip",
            "Content-Type": "application/json"
        }
    
    def _make_request(self, endpoint, params=None, timeout=10):
        url = f"{self.base_url}{endpoint}"
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=timeout)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {endpoint}: {e}")
            return None
    
    def get_all_orders(self, date_from=None, date_to=None, progress_callback=None):
        all_orders = []
        offset = 0
        limit = 100
        
        while True:
            if progress_callback:
                progress_callback(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤: offset {offset}...")
            
            endpoint = "/entity/customerorder"
            params = {
                "limit": limit,
                "offset": offset,
                "expand": "positions.assortment,agent,organization,state,attributes"
            }
            
            filters = []
            if date_from:
                filters.append(f"moment>={date_from}")
            if date_to:
                filters.append(f"moment<={date_to}")
            
            if filters:
                params["filter"] = ";".join(filters)
            
            data = self._make_request(endpoint, params, timeout=30)
            
            if not data or 'rows' not in data:
                break
            
            orders = data['rows']
            all_orders.extend(orders)
            
            if len(orders) < limit:
                break
            
            offset += limit
            time.sleep(0.2)
        
        return all_orders


class OrderProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
    
    def extract_commission_and_delivery(self, order):
        commission_percent = 0
        commission_sum = 0
        delivery_cost = 0
        
        attributes = order.get("attributes", [])
        
        for attr in attributes:
            attr_name = attr.get("name", "")
            attr_value = attr.get("value")
            
            if attr_value is None or attr_value == "":
                continue
            
            try:
                attr_value = float(attr_value)
            except:
                continue
            
            attr_name_lower = attr_name.lower()
            
            if "–∫–æ–º–∏—Å—Å" in attr_name_lower and "—Ç–æ–≤–∞—Ä" in attr_name_lower:
                commission_sum += attr_value
            elif "–∫–æ–º–∏—Å—Å" in attr_name_lower and "–¥–æ—Å—Ç–∞–≤–∫" in attr_name_lower:
                commission_sum += attr_value
            elif "–∫–æ–º–∏—Å—Å" in attr_name_lower:
                if "%" in attr_name:
                    commission_percent = attr_value
                elif "—Å—É–º–º–∞" in attr_name_lower:
                    commission_sum += attr_value
            
            if "–¥–æ—Å—Ç–∞–≤–∫" in attr_name_lower or "delivery" in attr_name_lower:
                if "–∫–æ–º–∏—Å—Å" not in attr_name_lower:
                    if any(word in attr_name_lower for word in ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å—É–º–º–∞", "—Ü–µ–Ω–∞", "cost"]):
                        delivery_cost += attr_value
        
        order_sum = order.get("sum", 0) / 100
        if commission_percent > 0 and commission_sum == 0:
            commission_sum = order_sum * (commission_percent / 100)
        
        return {
            'commission_percent': commission_percent,
            'commission_sum': commission_sum,
            'delivery_cost': delivery_cost
        }
    
    def get_buy_price_for_item(self, item, item_type, products_cache):
        buy_price = 0
        source = "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        if item_type == 'product':
            buy_price_obj = item.get('buyPrice', {})
            if buy_price_obj and buy_price_obj.get('value', 0) > 0:
                buy_price = buy_price_obj.get('value', 0)
                source = "—Ç–æ–≤–∞—Ä"
        elif item_type == 'bundle':
            article = item.get('article')
            if article and article in products_cache:
                base_product = products_cache[article]
                buy_price_obj = base_product.get('buyPrice', {})
                if buy_price_obj and buy_price_obj.get('value', 0) > 0:
                    buy_price = buy_price_obj.get('value', 0)
                    source = f"–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä (–∞—Ä—Ç. {article})"
        elif item_type == 'variant':
            buy_price_obj = item.get('buyPrice', {})
            if buy_price_obj and buy_price_obj.get('value', 0) > 0:
                buy_price = buy_price_obj.get('value', 0)
                source = "–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è"
        
        return {'value': buy_price, 'source': source}
    
    def process_orders(self, orders, products_cache, progress_callback=None):
        orders_data = []
        positions_data = []
        summaries = []
        
        for idx, order in enumerate(orders):
            if progress_callback and (idx + 1) % 50 == 0:
                progress_callback(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx + 1}/{len(orders)}")
            
            order_data = self.extract_order_data(order)
            orders_data.append(order_data)
            
            costs = self.extract_commission_and_delivery(order)
            positions = order.get('positions', {}).get('rows', [])
            total_positions = len(positions)
            order_sum = order.get("sum", 0) / 100
            order_cost = 0
            
            for pos in positions:
                assortment = pos.get('assortment', {})
                item_type = assortment.get('meta', {}).get('type', 'product')
                
                buy_price_info = self.get_buy_price_for_item(assortment, item_type, products_cache)
                cost_per_unit = buy_price_info['value'] / 100 if buy_price_info['value'] > 0 else 0
                
                quantity = pos.get("quantity", 0)
                price = pos.get("price", 0) / 100
                position_sum = price * quantity
                
                position_share = (position_sum / order_sum) if order_sum > 0 else (1 / total_positions if total_positions > 0 else 0)
                
                delivery_per_position = costs['delivery_cost'] * position_share
                commission_per_position = costs['commission_sum'] * position_share
                product_cost = cost_per_unit * quantity
                full_cost = product_cost + delivery_per_position + commission_per_position
                order_cost += full_cost
                
                profit = position_sum - full_cost
                margin_percent = (profit / position_sum * 100) if position_sum > 0 else 0
                
                position_data = {
                    "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": order.get("name", ""),
                    "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": order.get("moment", ""),
                    "–¢–æ–≤–∞—Ä": assortment.get("name", ""),
                    "–ê—Ä—Ç–∏–∫—É–ª": assortment.get("article", ""),
                    "–ö–æ–¥": assortment.get("code", ""),
                    "–¢–∏–ø": item_type,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                    "–¶–µ–Ω–∞": round(price, 2),
                    "–°–∫–∏–¥–∫–∞ %": pos.get("discount", 0),
                    "–ù–î–° %": pos.get("vat", 0),
                    "–°—É–º–º–∞": round(position_sum, 2),
                    "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –µ–¥.": round(cost_per_unit, 2),
                    "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –æ–±—â–∞—è": round(product_cost, 2),
                    "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é": round(delivery_per_position, 2),
                    "–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é": round(commission_per_position, 2),
                    "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": round(full_cost, 2),
                    "–ü—Ä–∏–±—ã–ª—å": round(profit, 2),
                    "–ú–∞—Ä–∂–∞ %": round(margin_percent, 2),
                    "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏": buy_price_info['source']
                }
                
                positions_data.append(position_data)
            
            vat_sum = order.get("vatSum", 0) / 100
            net_profit = order_sum - order_cost - vat_sum
            margin_percent = (net_profit / order_sum * 100) if order_sum > 0 else 0
            
            summary = {
                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": order.get("name", ""),
                "–í—ã—Ä—É—á–∫–∞": round(order_sum, 2),
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤": round(sum(p["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –æ–±—â–∞—è"] for p in positions_data if p["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"] == order.get("name", "")), 2),
                "–î–æ—Å—Ç–∞–≤–∫–∞": round(costs['delivery_cost'], 2),
                "–ö–æ–º–∏—Å—Å–∏—è –ú–ü": round(costs['commission_sum'], 2),
                "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": round(order_cost, 2),
                "–ù–î–°": round(vat_sum, 2),
                "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": round(net_profit, 2),
                "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å %": round(margin_percent, 2),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤": total_positions,
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞": "–î–∞" if order_cost > 0 else "–ù–µ—Ç"
            }
            
            summaries.append(summary)
        
        return orders_data, positions_data, summaries
    
    @staticmethod
    def extract_order_data(order):
        order_data = {
            "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": order.get("name", ""),
            "–î–∞—Ç–∞": order.get("moment", ""),
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": order.get("agent", {}).get("name", "") if order.get("agent") else "",
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": order.get("organization", {}).get("name", "") if order.get("organization") else "",
            "–°—Ç–∞—Ç—É—Å": order.get("state", {}).get("name", "") if order.get("state") else "",
            "–ü—Ä–∏–º–µ–Ω—ë–Ω": "–î–∞" if order.get("applicable") else "–ù–µ—Ç",
            "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞": order.get("sum", 0) / 100,
            "–û–ø–ª–∞—á–µ–Ω–æ": order.get("payedSum", 0) / 100,
            "–û—Ç–≥—Ä—É–∂–µ–Ω–æ": order.get("shippedSum", 0) / 100,
            "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ": order.get("reservedSum", 0) / 100,
            "–ù–î–°": order.get("vatSum", 0) / 100,
            "–ù–î–° –≤–∫–ª—é—á—ë–Ω": "–î–∞" if order.get("vatIncluded") else "–ù–µ—Ç",
        }
        
        attributes = order.get("attributes", [])
        for attr in attributes:
            attr_name = attr.get("name", "")
            attr_value = attr.get("value", "")
            order_data[attr_name] = attr_value
        
        if order.get("shipmentAddress"):
            order_data["–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"] = order.get("shipmentAddress")
        
        return order_data


class GoogleSheetsUploader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self, credentials_file, spreadsheet_name):
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]

        # üîÑ –í–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞ –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Streamlit Secrets
        if "google_credentials" in st.secrets:
            creds_dict = st.secrets["google_credentials"]
            creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
        else:
            # fallback ‚Äî –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ
            creds = Credentials.from_service_account_file(credentials_file, scopes=scope)

        self.client = gspread.authorize(creds)
        self.spreadsheet = self.client.open(spreadsheet_name)
    
    def get_existing_orders(self, worksheet_name):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            worksheet = self.spreadsheet.worksheet(worksheet_name)
            data = worksheet.get_all_values()
            if len(data) > 1:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
                return set(row[0] for row in data[1:] if row[0])
            return set()
        except:
            return set()
    
    def upload_dataframe(self, df, worksheet_name, selected_fields=None, mode="replace"):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å DataFrame —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        try:
            worksheet = self.spreadsheet.worksheet(worksheet_name)
        except gspread.exceptions.WorksheetNotFound:
            worksheet = self.spreadsheet.add_worksheet(title=worksheet_name, rows=1000, cols=50)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π
        if selected_fields:
            available_fields = [f for f in selected_fields if f in df.columns]
            df = df[available_fields]
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df_clean = df.copy()
        df_clean = df_clean.replace([float('inf'), float('-inf')], 0)
        df_clean = df_clean.fillna('')

        existing_data = worksheet.get_all_values()
        is_empty = len(existing_data) == 0

        if mode == "replace":
            worksheet.clear()
            start_row = 1
            include_header = True
        elif mode == "append":
            start_row = len(existing_data) + 1
            include_header = is_empty  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
        else:  # update
            existing_orders = self.get_existing_orders(worksheet_name)
            if "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞" in df_clean.columns:
                new_df = df_clean[~df_clean["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"].isin(existing_orders)]
                if new_df.empty:
                    logger.info(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {worksheet_name}")
                    return 0
                df_clean = new_df
                start_row = len(existing_data) + 1
                include_header = False
            else:
                worksheet.clear()
                start_row = 1
                include_header = True

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = []
        if include_header:
            data.append(df_clean.columns.values.tolist())

        for row in df_clean.values:
            clean_row = []
            for val in row:
                if isinstance(val, float):
                    if np.isnan(val) or np.isinf(val):
                        clean_row.append(0)
                    else:
                        clean_row.append(round(val, 2))
                else:
                    clean_row.append(val)
            data.append(clean_row)

        if data:
            worksheet.update(values=data, range_name=f'A{start_row}')

        logger.info(f"‚úÖ {worksheet_name}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_clean)} —Å—Ç—Ä–æ–∫")
        return len(df_clean)

    def format_worksheet(self, worksheet_name):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            worksheet = self.spreadsheet.worksheet(worksheet_name)
            worksheet.format('A1:Z1', {
                'textFormat': {'bold': True},
                'horizontalAlignment': 'CENTER',
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
            })
            worksheet.freeze(rows=1)
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    st.markdown('<h1 class="main-header">üìä –ú–æ–π–°–∫–ª–∞–¥ - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –û—Ç—á—ë—Ç</h1>', unsafe_allow_html=True)
    
    # Sidebar - –ù–∞–≤–∏–≥–∞—Ü–∏—è
    st.sidebar.title("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
                            ["üè† –ì–ª–∞–≤–Ω–∞—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è–º–∏", 
                             "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    config = ConfigManager.load_config()
    fields_config = ConfigManager.load_fields_config()
    sync_state = ConfigManager.load_sync_state()
    
    # ==================== –ì–õ–ê–í–ù–ê–Ø ====================
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        st.subheader("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üì¶ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", 
                     sync_state.get("last_sync", "–ù–∏–∫–æ–≥–¥–∞") or "–ù–∏–∫–æ–≥–¥–∞")
        
        with col2:
            st.metric("üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤", 
                     len(sync_state.get("synced_orders", [])))
        
        with col3:
            st.metric("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", 
                     f"{config.get('sync_schedule', 'daily')} –≤ {config.get('sync_time', '09:00')}")
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        st.subheader("üöÄ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            days = st.number_input("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–µ–π:", 
                                  min_value=1, max_value=365, 
                                  value=config.get("days_back", 30))
        
        with col2:
            st.write("")
            st.write("")
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", use_container_width=True):
                run_sync(config, fields_config, sync_state, days)
    
    # ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        tab1, tab2, tab3 = st.tabs(["üîë API", "üìä Google Sheets", "‚è∞ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"])
        
        with tab1:
            st.markdown("### –ú–æ–π–°–∫–ª–∞–¥ API")
            token = st.text_input("–¢–æ–∫–µ–Ω API:", 
                                 value=config.get("moysklad_token", ""),
                                 type="password")
            
            if st.button("üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"):
                if token:
                    api = MoySkladAPI(token)
                    test = api._make_request("/entity/customerorder", {"limit": 1})
                    if test:
                        st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                else:
                    st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω")
            
            config["moysklad_token"] = token
        
        with tab2:
            st.markdown("### Google Sheets")
            creds_file = st.text_input("–§–∞–π–ª credentials:", 
                                       value=config.get("google_credentials_file", "credentials.json"))
            
            spreadsheet = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:", 
                                       value=config.get("spreadsheet_name", "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç"))
            
            config["google_credentials_file"] = creds_file
            config["spreadsheet_name"] = spreadsheet
        
        with tab3:
            st.markdown("### –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            
            schedule = st.selectbox("–ß–∞—Å—Ç–æ—Ç–∞:",
                                   ["daily", "weekly", "manual"],
                                   index=["daily", "weekly", "manual"].index(config.get("sync_schedule", "daily")))
            
            sync_time = st.time_input("–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è GitHub Actions):",
                                     value=datetime.strptime(config.get("sync_time", "09:00"), "%H:%M").time())
            
            days_back = st.number_input("–ó–∞–≥—Ä—É–∂–∞—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–µ–π:",
                                       min_value=1, max_value=365,
                                       value=config.get("days_back", 30))
            
            config["sync_schedule"] = schedule
            config["sync_time"] = sync_time.strftime("%H:%M")
            config["days_back"] = days_back
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
            ConfigManager.save_config(config)
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    
    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–Ø–ú–ò ====================
    elif page == "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è–º–∏":
        st.subheader("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è–º–∏ –æ—Ç—á—ë—Ç–∞")
        
        tab1, tab2, tab3 = st.tabs(["üì¶ –ó–∞–∫–∞–∑—ã", "üìã –ü–æ–∑–∏—Ü–∏–∏", "üí∞ –°–≤–æ–¥–∫–∞"])
        
        with tab1:
            st.markdown("### –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã '–ó–∞–∫–∞–∑—ã'")
            all_fields = DEFAULT_FIELDS["orders"] + list(set(fields_config.get("orders", DEFAULT_FIELDS["orders"])) - set(DEFAULT_FIELDS["orders"]))
            
            selected = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                all_fields,
                default=fields_config.get("orders", DEFAULT_FIELDS["orders"])
            )
            
            fields_config["orders"] = selected
        
        with tab2:
            st.markdown("### –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã '–ü–æ–∑–∏—Ü–∏–∏'")
            all_fields = DEFAULT_FIELDS["positions"] + list(set(fields_config.get("positions", DEFAULT_FIELDS["positions"])) - set(DEFAULT_FIELDS["positions"]))
            
            selected = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                all_fields,
                default=fields_config.get("positions", DEFAULT_FIELDS["positions"]),
                key="pos"
            )
            
            fields_config["positions"] = selected
        
        with tab3:
            st.markdown("### –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã '–°–≤–æ–¥–∫–∞'")
            all_fields = DEFAULT_FIELDS["summary"] + list(set(fields_config.get("summary", DEFAULT_FIELDS["summary"])) - set(DEFAULT_FIELDS["summary"]))
            
            selected = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                all_fields,
                default=fields_config.get("summary", DEFAULT_FIELDS["summary"]),
                key="sum"
            )
            
            fields_config["summary"] = selected
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π", use_container_width=True):
            ConfigManager.save_fields_config(fields_config)
            st.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    # ==================== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ====================
    elif page == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è":
        st.subheader("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info(f"**–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:**\n\n{sync_state.get('last_sync', '–ù–∏–∫–æ–≥–¥–∞')}")
        
        with col2:
            st.info(f"**–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤:**\n\n{len(sync_state.get('synced_orders', []))}")
        
        st.markdown("---")
        
        sync_mode = st.radio("–†–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:",
                            ["üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã)",
                             "üîÉ –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
                             "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º"])
        
        date_col1, date_col2 = st.columns(2)
        
        with date_col1:
            date_from = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:",
                                     value=datetime.now() - timedelta(days=config.get("days_back", 30)))
        
        with date_col2:
            date_to = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                                   value=datetime.now())
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", use_container_width=True):
            mode_map = {
                "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã)": "update",
                "üîÉ –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö": "replace",
                "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º": "append"
            }
            
            run_sync(config, fields_config, sync_state, 
                    days=(date_to - date_from).days,
                    mode=mode_map[sync_mode],
                    date_from=date_from,
                    date_to=date_to)
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    elif page == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑")
        
        if not config.get("moysklad_token") or not config.get("google_credentials_file"):
            st.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'")
            return
        
        try:
            uploader = GoogleSheetsUploader(
                config["google_credentials_file"],
                config["spreadsheet_name"]
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
            try:
                worksheet = uploader.spreadsheet.worksheet("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                stats_data = worksheet.get_all_records()
                
                if stats_data:
                    df_stats = pd.DataFrame(stats_data)
                    
                    st.markdown("### üí∞ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    for idx, row in df_stats.iterrows():
                        metric = row.get("–ú–µ—Ç—Ä–∏–∫–∞", "")
                        value = row.get("–ó–Ω–∞—á–µ–Ω–∏–µ", 0)
                        
                        if idx % 4 == 0:
                            col1.metric(metric, f"{value:,.2f}")
                        elif idx % 4 == 1:
                            col2.metric(metric, f"{value:,.2f}")
                        elif idx % 4 == 2:
                            col3.metric(metric, f"{value:,.2f}")
                        else:
                            col4.metric(metric, f"{value:,.2f}")
                    
                    st.markdown("---")
                    st.dataframe(df_stats, use_container_width=True)
                else:
                    st.info("üìä –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")
            
            except gspread.exceptions.WorksheetNotFound:
                st.info("üìä –õ–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def run_sync(config, fields_config, sync_state, days=30, mode="update", date_from=None, date_to=None):
    """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    if not config.get("moysklad_token"):
        st.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥")
        return
    
    if not config.get("google_credentials_file"):
        st.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª credentials")
        return
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        status_text.text("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ú–æ–π–°–∫–ª–∞–¥...")
        progress_bar.progress(10)
        
        api = MoySkladAPI(config["moysklad_token"])
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        status_text.text("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
        progress_bar.progress(20)
        
        if date_from and date_to:
            date_from_str = date_from.strftime("%Y-%m-%d 00:00:00")
            date_to_str = date_to.strftime("%Y-%m-%d 23:59:59")
        else:
            date_to = datetime.now()
            date_from = date_to - timedelta(days=days)
            date_from_str = date_from.strftime("%Y-%m-%d 00:00:00")
            date_to_str = date_to.strftime("%Y-%m-%d 23:59:59")
        
        orders = api.get_all_orders(
            date_from_str, 
            date_to_str,
            progress_callback=lambda msg: status_text.text(msg)
        )
        
        if not orders:
            st.warning("‚ö†Ô∏è –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        progress_bar.progress(40)
        
        # 3. –°–±–æ—Ä –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        status_text.text("üîç –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ç–∏–∫—É–ª–æ–≤...")
        unique_articles = set()
        
        for order in orders:
            positions = order.get('positions', {}).get('rows', [])
            for pos in positions:
                assortment = pos.get('assortment', {})
                item_type = assortment.get('meta', {}).get('type', 'product')
                article = assortment.get('article')
                
                if article and item_type == 'bundle':
                    unique_articles.add(article)
        
        # 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        status_text.text("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
        progress_bar.progress(50)
        
        products_cache = {}
        if unique_articles:
            for article in unique_articles:
                endpoint = "/entity/product"
                params = {"filter": f"article={article}", "limit": 1}
                
                data = api._make_request(endpoint, params)
                if data and data.get('rows'):
                    product = data['rows'][0]
                    products_cache[article] = product
                
                time.sleep(0.05)
        
        # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        status_text.text("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        progress_bar.progress(60)
        
        processor = OrderProcessor()
        orders_data, positions_data, summaries = processor.process_orders(
            orders, 
            products_cache,
            progress_callback=lambda msg: status_text.text(msg)
        )
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        status_text.text("üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        progress_bar.progress(70)
        
        df_orders = pd.DataFrame(orders_data)
        df_positions = pd.DataFrame(positions_data)
        df_summary = pd.DataFrame(summaries)
        
        # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if not df_summary.empty:
            total_stats = {
                "–ú–µ—Ç—Ä–∏–∫–∞": [
                    "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
                    "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤",
                    "–î–æ—Å—Ç–∞–≤–∫–∞",
                    "–ö–æ–º–∏—Å—Å–∏–∏ –ú–ü",
                    "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å",
                    "–ù–î–°",
                    "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å",
                    "–°—Ä–µ–¥–Ω—è—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å %",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
                    "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    round(df_summary["–í—ã—Ä—É—á–∫–∞"].sum(), 2),
                    round(df_summary["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"].sum(), 2),
                    round(df_summary["–î–æ—Å—Ç–∞–≤–∫–∞"].sum(), 2),
                    round(df_summary["–ö–æ–º–∏—Å—Å–∏—è –ú–ü"].sum(), 2),
                    round(df_summary["–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(), 2),
                    round(df_summary["–ù–î–°"].sum(), 2),
                    round(df_summary["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"].sum(), 2),
                    round(df_summary["–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å %"].mean(), 2),
                    len(df_summary),
                    round(df_summary["–í—ã—Ä—É—á–∫–∞"].mean(), 2)
                ]
            }
            df_stats = pd.DataFrame(total_stats)
        else:
            df_stats = pd.DataFrame()
        
        # 8. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Sheets
        status_text.text("‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Sheets...")
        progress_bar.progress(80)
        
        uploader = GoogleSheetsUploader(
            config["google_credentials_file"],
            config["spreadsheet_name"]
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –∏ —Ä–µ–∂–∏–º–∞
        uploaded_orders = uploader.upload_dataframe(
            df_orders, 
            "–ó–∞–∫–∞–∑—ã –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            selected_fields=fields_config.get("orders"),
            mode=mode
        )
        
        uploaded_positions = uploader.upload_dataframe(
            df_positions,
            "–ü–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ",
            selected_fields=fields_config.get("positions"),
            mode=mode
        )
        
        uploaded_summary = uploader.upload_dataframe(
            df_summary,
            "–°–≤–æ–¥–∫–∞ —Å –ø—Ä–∏–±—ã–ª—å—é",
            selected_fields=fields_config.get("summary"),
            mode=mode
        )
        
        uploader.upload_dataframe(
            df_stats,
            "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            mode="replace"
        )
        
        progress_bar.progress(90)
        
        # 9. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        status_text.text("üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        for sheet_name in ["–ó–∞–∫–∞–∑—ã –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ", 
                          "–°–≤–æ–¥–∫–∞ —Å –ø—Ä–∏–±—ã–ª—å—é", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
            uploader.format_worksheet(sheet_name)
        
        # 10. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        synced_orders = sync_state.get("synced_orders", [])
        new_order_numbers = [o["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"] for o in orders_data]
        
        if mode == "update":
            synced_orders.extend([o for o in new_order_numbers if o not in synced_orders])
        elif mode == "replace":
            synced_orders = new_order_numbers
        else:  # append
            synced_orders.extend(new_order_numbers)
        
        sync_state["last_sync"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        sync_state["synced_orders"] = list(set(synced_orders))
        
        ConfigManager.save_sync_state(sync_state)
        
        # 11. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        progress_bar.progress(100)
        status_text.text("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.success("### ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤", len(orders))
        
        with col2:
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π", len(df_positions))
        
        with col3:
            if mode == "update":
                st.metric("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö", uploaded_orders)
            else:
                st.metric("–ó–∞–≥—Ä—É–∂–µ–Ω–æ", uploaded_orders)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not df_stats.empty:
            st.markdown("---")
            st.markdown("### üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.dataframe(df_stats, use_container_width=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
        st.markdown("---")
        st.markdown("### üíæ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            csv_orders = df_orders.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å –ó–∞–∫–∞–∑—ã (CSV)",
                csv_orders,
                "orders.csv",
                "text/csv"
            )
        
        with col2:
            csv_positions = df_positions.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å –ü–æ–∑–∏—Ü–∏–∏ (CSV)",
                csv_positions,
                "positions.csv",
                "text/csv"
            )
        
        with col3:
            csv_summary = df_summary.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å –°–≤–æ–¥–∫—É (CSV)",
                csv_summary,
                "summary.csv",
                "text/csv"
            )
    
    except Exception as e:
        progress_bar.progress(0)
        status_text.text("")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        st.exception(e)


if __name__ == "__main__":
    main()