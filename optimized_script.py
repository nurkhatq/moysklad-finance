import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
from collections import defaultdict

class MoySkladAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ú–æ–π–°–∫–ª–∞–¥"""
    
    def __init__(self, token):
        self.base_url = "https://api.moysklad.ru/api/remap/1.2"
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Accept-Encoding": "gzip",
            "Content-Type": "application/json"
        }
    
    def _make_request(self, endpoint, params=None, timeout=10):
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        url = f"{self.base_url}{endpoint}"
        try:
            response = requests.get(url, headers=self.headers, params=params, timeout=timeout)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {endpoint}: {e}")
            return None
    
    def get_all_orders(self, date_from=None, date_to=None):
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        all_orders = []
        offset = 0
        limit = 100
        
        while True:
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã: offset {offset}...")
            
            endpoint = "/entity/customerorder"
            params = {
                "limit": limit,
                "offset": offset,
                "expand": "positions.assortment,agent,organization,state,attributes"
            }
            
            filters = []
            if date_from:
                filters.append(f"moment>={date_from}")
            if date_to:
                filters.append(f"moment<={date_to}")
            
            if filters:
                params["filter"] = ";".join(filters)
            
            data = self._make_request(endpoint, params, timeout=30)
            
            if not data or 'rows' not in data:
                break
            
            orders = data['rows']
            all_orders.extend(orders)
            
            if len(orders) < limit:
                break
            
            offset += limit
            time.sleep(0.2)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(all_orders)}")
        return all_orders
    
    def get_products_batch(self, product_ids):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–∞–∫–µ—Ç–æ–º"""
        if not product_ids:
            return {}
        
        products = {}
        batch_size = 100
        
        for i in range(0, len(product_ids), batch_size):
            batch = list(product_ids)[i:i+batch_size]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
            filter_parts = [f"id={pid}" for pid in batch]
            filter_str = ";".join(filter_parts)
            
            endpoint = "/entity/product"
            params = {
                "filter": filter_str,
                "limit": 100
            }
            
            data = self._make_request(endpoint, params)
            
            if data and 'rows' in data:
                for product in data['rows']:
                    products[product['id']] = product
            
            time.sleep(0.1)
        
        return products


class OrderProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
    
    def __init__(self):
        self.product_cache = {}
    
    def extract_commission_and_delivery(self, order):
        """–ò–∑–≤–ª–µ—á—å –∫–æ–º–∏—Å—Å–∏—é –∏ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        
        commission_percent = 0
        commission_sum = 0
        delivery_cost = 0
        
        attributes = order.get("attributes", [])
        
        for attr in attributes:
            attr_name = attr.get("name", "")
            attr_value = attr.get("value")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if attr_value is None or attr_value == "":
                continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            try:
                attr_value = float(attr_value)
            except:
                continue
            
            attr_name_lower = attr_name.lower()
            
            # –ö–æ–º–∏—Å—Å–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            if "–∫–æ–º–∏—Å—Å" in attr_name_lower and "—Ç–æ–≤–∞—Ä" in attr_name_lower:
                commission_sum += attr_value
            
            # –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É
            elif "–∫–æ–º–∏—Å—Å" in attr_name_lower and "–¥–æ—Å—Ç–∞–≤–∫" in attr_name_lower:
                commission_sum += attr_value
            
            # –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
            elif "–∫–æ–º–∏—Å—Å" in attr_name_lower:
                if "%" in attr_name:
                    commission_percent = attr_value
                elif "—Å—É–º–º–∞" in attr_name_lower:
                    commission_sum += attr_value
            
            # –î–æ—Å—Ç–∞–≤–∫–∞
            if "–¥–æ—Å—Ç–∞–≤–∫" in attr_name_lower or "delivery" in attr_name_lower:
                # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É (—É–∂–µ —É—á–ª–∏ –≤—ã—à–µ)
                if "–∫–æ–º–∏—Å—Å" not in attr_name_lower:
                    if any(word in attr_name_lower for word in ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å—É–º–º–∞", "—Ü–µ–Ω–∞", "cost"]):
                        delivery_cost += attr_value
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –Ω–æ –Ω–µ—Ç —Å—É–º–º—ã - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        order_sum = order.get("sum", 0) / 100
        if commission_percent > 0 and commission_sum == 0:
            commission_sum = order_sum * (commission_percent / 100)
        
        return {
            'commission_percent': commission_percent,
            'commission_sum': commission_sum,
            'delivery_cost': delivery_cost
        }



    def get_buy_price_for_item(self, item, item_type, products_cache):
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏"""
        
        buy_price = 0
        source = "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if item_type == 'product':
            buy_price_obj = item.get('buyPrice', {})
            if buy_price_obj and buy_price_obj.get('value', 0) > 0:
                buy_price = buy_price_obj.get('value', 0)
                source = "—Ç–æ–≤–∞—Ä"
        
        # –î–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞ - –∏—â–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        elif item_type == 'bundle':
            article = item.get('article')
            if article and article in products_cache:
                base_product = products_cache[article]
                buy_price_obj = base_product.get('buyPrice', {})
                if buy_price_obj and buy_price_obj.get('value', 0) > 0:
                    buy_price = buy_price_obj.get('value', 0)
                    source = f"–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä (–∞—Ä—Ç. {article})"
        
        # –î–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        elif item_type == 'variant':
            buy_price_obj = item.get('buyPrice', {})
            if buy_price_obj and buy_price_obj.get('value', 0) > 0:
                buy_price = buy_price_obj.get('value', 0)
                source = "–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è"
        
        return {
            'value': buy_price,
            'source': source
        }
    
    def process_orders(self, orders, products_cache):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
        
        orders_data = []
        positions_data = []
        summaries = []
        
        print("\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        for idx, order in enumerate(orders):
            if (idx + 1) % 200 == 0:
                print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx + 1}/{len(orders)}")
            
            # 1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            order_data = self.extract_order_data(order)
            orders_data.append(order_data)
            
            # 2. –ö–æ–º–∏—Å—Å–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∞
            costs = self.extract_commission_and_delivery(order)
            
            # 3. –ü–æ–∑–∏—Ü–∏–∏
            positions = order.get('positions', {}).get('rows', [])
            total_positions = len(positions)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏ –∫–æ–º–∏—Å—Å–∏—é –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
            order_sum = order.get("sum", 0) / 100
            
            order_cost = 0
            
            for pos in positions:
                assortment = pos.get('assortment', {})
                item_type = assortment.get('meta', {}).get('type', 'product')
                
                # –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
                buy_price_info = self.get_buy_price_for_item(assortment, item_type, products_cache)
                cost_per_unit = buy_price_info['value'] / 100 if buy_price_info['value'] > 0 else 0
                
                quantity = pos.get("quantity", 0)
                price = pos.get("price", 0) / 100
                position_sum = price * quantity
                
                # –î–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ
                position_share = (position_sum / order_sum) if order_sum > 0 else (1 / total_positions if total_positions > 0 else 0)
                
                # –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                delivery_per_position = costs['delivery_cost'] * position_share
                
                # –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                commission_per_position = costs['commission_sum'] * position_share
                
                # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
                product_cost = cost_per_unit * quantity
                
                # –ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                full_cost = product_cost + delivery_per_position + commission_per_position
                
                order_cost += full_cost
                
                # –ü—Ä–∏–±—ã–ª—å
                profit = position_sum - full_cost
                margin_percent = (profit / position_sum * 100) if position_sum > 0 else 0
                
                position_data = {
                    "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": order.get("name", ""),
                    "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": order.get("moment", ""),
                    "–¢–æ–≤–∞—Ä": assortment.get("name", ""),
                    "–ê—Ä—Ç–∏–∫—É–ª": assortment.get("article", ""),
                    "–ö–æ–¥": assortment.get("code", ""),
                    "–¢–∏–ø": item_type,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                    "–¶–µ–Ω–∞": round(price, 2),
                    "–°–∫–∏–¥–∫–∞ %": pos.get("discount", 0),
                    "–ù–î–° %": pos.get("vat", 0),
                    "–°—É–º–º–∞": round(position_sum, 2),
                    "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –µ–¥.": round(cost_per_unit, 2),
                    "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –æ–±—â–∞—è": round(product_cost, 2),
                    "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é": round(delivery_per_position, 2),
                    "–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é": round(commission_per_position, 2),
                    "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": round(full_cost, 2),
                    "–ü—Ä–∏–±—ã–ª—å": round(profit, 2),
                    "–ú–∞—Ä–∂–∞ %": round(margin_percent, 2),
                    "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏": buy_price_info['source']
                }
                
                positions_data.append(position_data)
            
            # 4. –°–≤–æ–¥–∫–∞
            vat_sum = order.get("vatSum", 0) / 100
            net_profit = order_sum - order_cost - vat_sum
            margin_percent = (net_profit / order_sum * 100) if order_sum > 0 else 0
            
            summary = {
                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": order.get("name", ""),
                "–í—ã—Ä—É—á–∫–∞": round(order_sum, 2),
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤": round(sum(p["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –æ–±—â–∞—è"] for p in positions_data if p["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"] == order.get("name", "")), 2),
                "–î–æ—Å—Ç–∞–≤–∫–∞": round(costs['delivery_cost'], 2),
                "–ö–æ–º–∏—Å—Å–∏—è –ú–ü": round(costs['commission_sum'], 2),
                "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": round(order_cost, 2),
                "–ù–î–°": round(vat_sum, 2),
                "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å": round(net_profit, 2),
                "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å %": round(margin_percent, 2),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤": total_positions,
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞": "–î–∞" if order_cost > 0 else "–ù–µ—Ç"
            }
            
            summaries.append(summary)
        
        print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(orders)}/{len(orders)}")
        
        return orders_data, positions_data, summaries
    
    @staticmethod
    def extract_order_data(order):
        """–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞"""
        
        order_data = {
            "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": order.get("name", ""),
            "–î–∞—Ç–∞": order.get("moment", ""),
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": order.get("agent", {}).get("name", "") if order.get("agent") else "",
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": order.get("organization", {}).get("name", "") if order.get("organization") else "",
            "–°—Ç–∞—Ç—É—Å": order.get("state", {}).get("name", "") if order.get("state") else "",
            "–ü—Ä–∏–º–µ–Ω—ë–Ω": "–î–∞" if order.get("applicable") else "–ù–µ—Ç",
            "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞": order.get("sum", 0) / 100,
            "–û–ø–ª–∞—á–µ–Ω–æ": order.get("payedSum", 0) / 100,
            "–û—Ç–≥—Ä—É–∂–µ–Ω–æ": order.get("shippedSum", 0) / 100,
            "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ": order.get("reservedSum", 0) / 100,
            "–ù–î–°": order.get("vatSum", 0) / 100,
            "–ù–î–° –≤–∫–ª—é—á—ë–Ω": "–î–∞" if order.get("vatIncluded") else "–ù–µ—Ç",
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        attributes = order.get("attributes", [])
        for attr in attributes:
            attr_name = attr.get("name", "")
            attr_value = attr.get("value", "")
            order_data[attr_name] = attr_value
        
        if order.get("shipmentAddress"):
            order_data["–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"] = order.get("shipmentAddress")
        
        return order_data


class GoogleSheetsUploader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self, credentials_file, spreadsheet_name):
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]
        
        creds = ServiceAccountCredentials.from_json_keyfile_name(credentials_file, scope)
        self.client = gspread.authorize(creds)
        self.spreadsheet = self.client.open(spreadsheet_name)
    
    def upload_dataframe(self, df, worksheet_name, clear=True):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å DataFrame –≤ –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            worksheet = self.spreadsheet.worksheet(worksheet_name)
        except gspread.exceptions.WorksheetNotFound:
            worksheet = self.spreadsheet.add_worksheet(title=worksheet_name, rows=1000, cols=50)
        
        if clear:
            worksheet.clear()
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df_clean = df.copy()
        df_clean = df_clean.replace([float('inf'), float('-inf')], 0)
        df_clean = df_clean.fillna('')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        data = []
        data.append(df_clean.columns.values.tolist())
        
        for row in df_clean.values:
            clean_row = []
            for val in row:
                if isinstance(val, float):
                    if np.isnan(val) or np.isinf(val):
                        clean_row.append(0)
                    else:
                        clean_row.append(round(val, 2))
                else:
                    clean_row.append(val)
            data.append(clean_row)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ü–∏—è–º–∏
        batch_size = 1000
        for i in range(0, len(data), batch_size):
            batch = data[i:i+batch_size]
            if i == 0:
                worksheet.update(values=batch, range_name='A1')
            else:
                worksheet.append_rows(batch, value_input_option='USER_ENTERED')
            print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {min(i+batch_size, len(data))}/{len(data)}")
        
        print(f"‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ª–∏—Å—Ç '{worksheet_name}': {len(df)} —Å—Ç—Ä–æ–∫")
    
    def format_worksheet(self, worksheet_name):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É"""
        try:
            worksheet = self.spreadsheet.worksheet(worksheet_name)
            
            worksheet.format('A1:Z1', {
                'textFormat': {'bold': True},
                'horizontalAlignment': 'CENTER',
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
            })
            
            worksheet.freeze(rows=1)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
    MOYSKLAD_TOKEN = "105d4f38eb9a02400c3a6428ea71640babe37e98"
    GOOGLE_CREDENTIALS_FILE = "credentials.json"
    SPREADSHEET_NAME = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç"
    
    # –ü–µ—Ä–∏–æ–¥
    date_to = datetime.now()
    date_from = date_to - timedelta(days=30)
    
    DATE_FROM = date_from.strftime("%Y-%m-%d 00:00:00")
    DATE_TO = date_to.strftime("%Y-%m-%d 23:59:59")
    
    print("=" * 60)
    print("–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó –ú–û–ô–°–ö–õ–ê–î –í GOOGLE SHEETS")
    print("(–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("=" * 60)
    print(f"–ü–µ—Ä–∏–æ–¥: {DATE_FROM} - {DATE_TO}\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    api = MoySkladAPI(MOYSKLAD_TOKEN)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å
    print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏...")
    orders = api.get_all_orders(DATE_FROM, DATE_TO)
    
    if not orders:
        print("‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # 2. –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤)
    print("\nüîç –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤...")
    unique_articles = set()
    
    for order in orders:
        positions = order.get('positions', {}).get('rows', [])
        for pos in positions:
            assortment = pos.get('assortment', {})
            item_type = assortment.get('meta', {}).get('type', 'product')
            article = assortment.get('article')
            
            if article and item_type == 'bundle':
                unique_articles.add(article)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤: {len(unique_articles)}")
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    products_cache = {}
    
    if unique_articles:
        print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤...")
        for article in unique_articles:
            endpoint = "/entity/product"
            params = {
                "filter": f"article={article}",
                "limit": 1
            }
            
            data = api._make_request(endpoint, params)
            if data and data.get('rows'):
                product = data['rows'][0]
                products_cache[article] = product
            
            time.sleep(0.05)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_cache)}")
    
    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    processor = OrderProcessor()
    orders_data, positions_data, summaries = processor.process_orders(orders, products_cache)
    
    # 5. –°–æ–∑–¥–∞—ë–º DataFrame
    df_orders = pd.DataFrame(orders_data)
    df_positions = pd.DataFrame(positions_data)
    df_summary = pd.DataFrame(summaries)
    
    # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    if not df_summary.empty:
        total_stats = {
            "–ú–µ—Ç—Ä–∏–∫–∞": [
                "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤",
                "–î–æ—Å—Ç–∞–≤–∫–∞",
                "–ö–æ–º–∏—Å—Å–∏–∏ –ú–ü",
                "–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å",
                "–ù–î–°",
                "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å",
                "–°—Ä–µ–¥–Ω—è—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å %",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
                "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                round(df_summary["–í—ã—Ä—É—á–∫–∞"].sum(), 2),
                round(df_summary["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"].sum(), 2),
                round(df_summary["–î–æ—Å—Ç–∞–≤–∫–∞"].sum(), 2),
                round(df_summary["–ö–æ–º–∏—Å—Å–∏—è –ú–ü"].sum(), 2),
                round(df_summary["–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(), 2),
                round(df_summary["–ù–î–°"].sum(), 2),
                round(df_summary["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"].sum(), 2),
                round(df_summary["–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å %"].mean(), 2),
                len(df_summary),
                round(df_summary["–í—ã—Ä—É—á–∫–∞"].mean(), 2)
            ]
        }
        df_stats = pd.DataFrame(total_stats)
    else:
        df_stats = pd.DataFrame()
    
    # 7. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    print("\n" + "=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("=" * 60)
    print(f"\n‚úÖ –ó–∞–∫–∞–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(df_orders)}")
    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(df_positions)}")
    
    if len(df_positions) > 0:
        with_cost = df_positions[df_positions['–ü–û–õ–ù–ê–Ø —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'] > 0]
        print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–π —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {len(with_cost)} ({len(with_cost)/len(df_positions)*100:.1f}%)")
    
    # 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π...")
    df_orders.to_csv("orders.csv", index=False, encoding='utf-8-sig')
    df_positions.to_csv("positions.csv", index=False, encoding='utf-8-sig')
    df_summary.to_csv("summary.csv", index=False, encoding='utf-8-sig')
    print("‚úì orders.csv\n‚úì positions.csv\n‚úì summary.csv")
    
    # 9. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Sheets
    print("\n" + "=" * 60)
    print("–ó–ê–ì–†–£–ó–ö–ê –í GOOGLE SHEETS")
    print("=" * 60)
    
    try:
        uploader = GoogleSheetsUploader(GOOGLE_CREDENTIALS_FILE, SPREADSHEET_NAME)
        
        print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        uploader.upload_dataframe(df_orders, "–ó–∞–∫–∞–∑—ã –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        uploader.upload_dataframe(df_positions, "–ü–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ")
        uploader.upload_dataframe(df_summary, "–°–≤–æ–¥–∫–∞ —Å –ø—Ä–∏–±—ã–ª—å—é")
        uploader.upload_dataframe(df_stats, "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        print("\nüé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        for sheet_name in ["–ó–∞–∫–∞–∑—ã –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ", "–°–≤–æ–¥–∫–∞ —Å –ø—Ä–∏–±—ã–ª—å—é", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
            uploader.format_worksheet(sheet_name)
        
        print("\n" + "=" * 60)
        print("‚úÖ –£–°–ü–ï–®–ù–û! –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets")
        print(f"üìä –¢–∞–±–ª–∏—Ü–∞: {SPREADSHEET_NAME}")
        print("=" * 60)
        
        if not df_stats.empty:
            print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(df_stats.to_string(index=False))
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª—ã")


if __name__ == "__main__":
    main()