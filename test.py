import requests
import json
from datetime import datetime, timedelta

class TestMoySkladDelivery:
    def __init__(self, token):
        self.base_url = "https://api.moysklad.ru/api/remap/1.2"
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Accept-Encoding": "gzip",
            "Content-Type": "application/json"
        }
    
    def get_test_orders(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"""
        endpoint = "/entity/customerorder"
        params = {
            "limit": limit,
            "expand": "positions.assortment,attributes"
        }
        
        response = requests.get(f"{self.base_url}{endpoint}", headers=self.headers, params=params)
        return response.json()
    
    def analyze_attributes(self, order):
        """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–∫–∞–∑–∞"""
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞: {order.get('name', 'N/A')}")
        print(f"üìÖ –î–∞—Ç–∞: {order.get('moment', 'N/A')}")
        print(f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.get('sum', 0) / 100:.2f} —Ä—É–±.")
        
        attributes = order.get('attributes', [])
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {len(attributes)}")
        
        delivery_found = False
        commission_found = False
        
        for attr in attributes:
            attr_name = attr.get('name', '')
            attr_value = attr.get('value', '')
            attr_type = attr.get('type', '')
            
            print(f"   üìù –ê—Ç—Ä–∏–±—É—Ç: '{attr_name}'")
            print(f"      –¢–∏–ø: {attr_type}")
            print(f"      –ó–Ω–∞—á–µ–Ω–∏–µ: {attr_value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
            if any(word in attr_name.lower() for word in ['–¥–æ—Å—Ç–∞–≤–∫', 'delivery']):
                delivery_found = True
                print(f"      üöõ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –î–û–°–¢–ê–í–ö–ê!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é
            if any(word in attr_name.lower() for word in ['–∫–æ–º–∏—Å—Å', 'commission']):
                commission_found = True
                print(f"      üí∞ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ö–û–ú–ò–°–°–ò–Ø!")
        
        return delivery_found, commission_found
    
    def calculate_delivery_distribution(self, order):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–û–°–¢–ê–í–ö–ò –î–õ–Ø –ó–ê–ö–ê–ó–ê {order.get('name', 'N/A')}")
        
        # –ù–∞–π–¥–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        delivery_cost = 0
        for attr in order.get('attributes', []):
            attr_name = attr.get('name', '').lower()
            attr_value = attr.get('value', 0)
            
            if any(word in attr_name for word in ['–¥–æ—Å—Ç–∞–≤–∫', 'delivery']):
                if any(word in attr_name for word in ['—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å—É–º–º–∞', '—Ü–µ–Ω–∞', 'cost']):
                    try:
                        delivery_cost = float(attr_value)
                        print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} —Ä—É–±.")
                    except:
                        pass
        
        if delivery_cost == 0:
            print("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ä–∞–≤–Ω–∞ 0")
            return
        
        positions = order.get('positions', {}).get('rows', [])
        order_sum = order.get('sum', 0) / 100
        
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        print(f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order_sum} —Ä—É–±.")
        
        total_after_distribution = 0
        
        for i, pos in enumerate(positions):
            assortment = pos.get('assortment', {})
            quantity = pos.get('quantity', 0)
            price = pos.get('price', 0) / 100
            position_sum = price * quantity
            
            # –î–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ
            position_share = (position_sum / order_sum) if order_sum > 0 else (1 / len(positions) if len(positions) > 0 else 0)
            
            # –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
            delivery_per_position = delivery_cost * position_share
            
            total_after_distribution += delivery_per_position
            
            print(f"\n   üì¶ –ü–æ–∑–∏—Ü–∏—è {i+1}:")
            print(f"      –¢–æ–≤–∞—Ä: {assortment.get('name', 'N/A')}")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
            print(f"      –¶–µ–Ω–∞: {price:.2f} —Ä—É–±.")
            print(f"      –°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏: {position_sum:.2f} —Ä—É–±.")
            print(f"      –î–æ–ª—è –≤ –∑–∞–∫–∞–∑–µ: {position_share:.4f}")
            print(f"      –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {delivery_per_position:.2f} —Ä—É–±.")
        
        print(f"\nüìä –ò–¢–û–ì–û —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {total_after_distribution:.2f} —Ä—É–±.")
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost:.2f} —Ä—É–±.")
        print(f"üìä –†–∞–∑–Ω–∏—Ü–∞: {abs(total_after_distribution - delivery_cost):.2f} —Ä—É–±.")
    
    def test_specific_order(self, order_id):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ ID"""
        endpoint = f"/entity/customerorder/{order_id}"
        params = {
            "expand": "positions.assortment,attributes"
        }
        
        response = requests.get(f"{self.base_url}{endpoint}", headers=self.headers, params=params)
        order = response.json()
        
        self.analyze_attributes(order)
        self.calculate_delivery_distribution(order)
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–û–°–¢–ê–í–ö–ò")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        data = self.get_test_orders(limit=5)
        
        if 'rows' not in data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã")
            return
        
        orders = data['rows']
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞: {len(orders)}")
        
        delivery_stats = {
            'total_orders': len(orders),
            'orders_with_delivery': 0,
            'orders_with_commission': 0,
            'orders_with_both': 0
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
        for i, order in enumerate(orders):
            print(f"\n{'='*50}")
            print(f"üì¶ –¢–ï–°–¢ –ó–ê–ö–ê–ó–ê {i+1}/{len(orders)}")
            print(f"{'='*50}")
            
            delivery_found, commission_found = self.analyze_attributes(order)
            
            if delivery_found:
                delivery_stats['orders_with_delivery'] += 1
                self.calculate_delivery_distribution(order)
            
            if commission_found:
                delivery_stats['orders_with_commission'] += 1
            
            if delivery_found and commission_found:
                delivery_stats['orders_with_both'] += 1
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n{'='*60}")
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ê")
        print(f"{'='*60}")
        print(f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {delivery_stats['total_orders']}")
        print(f"üöõ –ó–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: {delivery_stats['orders_with_delivery']}")
        print(f"üí∞ –ó–∞–∫–∞–∑–æ–≤ —Å –∫–æ–º–∏—Å—Å–∏–µ–π: {delivery_stats['orders_with_commission']}")
        print(f"üì¶üí∞ –ó–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –∫–æ–º–∏—Å—Å–∏–µ–π: {delivery_stats['orders_with_both']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if orders:
            with open('test_order_example.json', 'w', encoding='utf-8') as f:
                json.dump(orders[0], f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: test_order_example.json")


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    MOYSKLAD_TOKEN = "105d4f38eb9a02400c3a6428ea71640babe37e98"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = TestMoySkladDelivery(MOYSKLAD_TOKEN)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
    tester.run_comprehensive_test()
    
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
    # order_id = "–≤–∞—à-id-–∑–∞–∫–∞–∑–∞-–∑–¥–µ—Å—å"
    # tester.test_specific_order(order_id)


if __name__ == "__main__":
    main()